openapi: 3.0.3
info:
  title: Assignment project
  description: Test documentation of Assignment Project
  version : 1.0.0
paths:
  /login:
    post:
      tags:
        - Login
      summary: login to sys
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                {
                  "username":"IAMusername",
                  "password":"password11"
                }
      responses:
        '405':
          description: Invalid input
        '200':
          description: Successful login
          content:
            object:
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY4ODU1Njc5MiwianRpIjoiM2IxMmY0YmQtOWFmMi00NjMxLWE4MDUtMjlhZTQ1ZGFmZmI2IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IklBTXVzZXJuYW1lIiwibmJmIjoxNjg4NTU2NzkyLCJleHAiOjE2ODg1OTk5OTJ9.4TrgPs2l46irRrvHG6JrejCp8AKcrsN-oHfRfxR7K9k
  /logout:
    post:
      tags:
        - Logout
      responses:
        '200':
          description: Successful login
          content:
            object:
              example:
                msg: logout successful
  /createUser:
    post:
      tags:
        - create user
      summary: create new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: 
                {
                  "first_name": "newUser2",
                  "last_name": "LMNO",
                  "phone_no": "1234567891",
                  "is_admin": true
                }
      responses:
        '200':
          description: new user creation
          content:
            object:
              example:
                {
                  "first_name": "newUser3",
                  "is_admin": false,
                  "last_name": "LMNO",
                  "phone_no": "1234567891",
                  "user_id": 6
                }
  /updateUser:
    put:
      tags:
        - update user
      summary: Update an existing user
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              type: object
              required: 
                - user_id
              properties:
                user_id:
                  type: integer
                  example: 3
                first_name:
                  type: string
                  example: ABC
                last_name:
                  type: string
                  example: LMNUpdate
                phone_no:
                  type: string
                  example: 1234567890
                is_admin:
                  type: boolean
      responses:
        '200':
          description: user details successfully updated
          content:
            object:
              example:
                {
                  "first_name": "newUser3",
                  "is_admin": false,
                  "last_name": "LMNUpdate",
                  "phone_no": "1234567890",
                  "user_id": 6
                }
        '404':
          description: user_id not found
          content:
            object:
              example:
                {
                  "msg": "user_id not found"
                }
  /deleteUser/{user_id}:
    delete:
      tags:
        - delete user
      summary: Delete user details by ID
      parameters:
        - name: user_id
          in: path
          description: ID of the user that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successfully deleted user details
        '404':
          description: user_id not found
  /createProduct:
    post:
      tags:
        - create product
      summary: create new product
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: 
                {
                  "product_title" : "Music Sys", 
                  "product_description" :"U34 ", 
                  "product_price" : 600, 
                  "product_by" : "Samsung"
                }
      responses:
        '200':
          description: new product created
          content:
            object:
              example:
                {
                  "product_title" : "Music Sys", 
                  "product_description" :"U34 ", 
                  "product_price" : 600, 
                  "product_by" : "Samsung",
                  "product_id": 1
                }
  /updateProduct:
    put:
      tags:
        - update product
      summary: Update an existing product
      requestBody:
        description: Update an existing product in the store
        content:
          application/json:
            schema:
              type: object
              required: 
                - product_id
              properties:
                product_id:
                  type: integer
                  example: 3
                product_title:
                  type: string
                  example: CPUUpdated
                product_description:
                  type: string
                  example: LMn
                product_price:
                  type: string
                  example: 1234567890
                product_by:
                  type: string
                  example: Asus
      responses:
        '200':
          description: product details successfully updated
          content:
            object:
              example:
                {
                  "product_id": 3,
                  "product_title": "CPUUpdated",
                  "product_description": "LMn",
                  "product_price": "1234567890",
                  "product_by": "Asus"
                }
        '404':
          description: product not found
          content:
            object:
              example:
                {
                  "msg": "product_id not found"
                }
  /deleteproduct/{product_id}:
    delete:
      tags:
        - delete product
      summary: Delete user details by ID
      parameters:
        - name: product_id
          in: path
          description: ID of the product that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successfully deleted user details
        '404':
          description: product_id not found
  /productList:
    get:
      tags:
        - list of all products
      responses:
        '200':
          description: list of all products
          content:
            object:
              example:
                [
                  {
                    "product_id": 1,
                    "product_title": "Laptop",
                    "product_description": "latitude3340 ",
                    "product_price": 50000.0,
                    "product_by": "DELL"
                  },
                  {
                    "product_id": 2,
                    "product_title": "Mouse",
                    "product_description": "mouseUpdated",
                    "product_price": 700.0,
                    "product_by": "Sony"
                  }
                ]
  /userList/{user_id}:
    get:
      tags:
        - list of all users 
      description: get list of all users (only for admin)
      parameters:
      - name: user_id
        in: path
        description: ID of admin user 
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: list of all users
          content:
            object:
              example:
                [
                  {
                    "user_id": 1,
                    "first_name": "ABC",
                    "last_name": "LMN",
                    "phone_no": "1234567890",
                    "is_admin": false
                  },
                  {
                    "user_id": 2,
                    "first_name": "ABCD",
                    "last_name": "LMN2update",
                    "phone_no": "1234567891",
                    "is_admin": true
                  },
                  {
                    "user_id": 3,
                    "first_name": "newUser1",
                    "last_name": "LMNO",
                    "phone_no": "1234567891",
                    "is_admin": false
                  },
                  {
                    "user_id": 4,
                    "first_name": "newUser1",
                    "last_name": "LMNO",
                    "phone_no": "1234567891",
                    "is_admin": false
                  },
                  {
                    "user_id": 5,
                    "first_name": "newUser1",
                    "last_name": "LMNO",
                    "phone_no": "1234567891",
                    "is_admin": false
                  }
                ]
  /placeOrder:
    post:
      tags:
        - place order
      summary: place new order
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - user_id
                - product_id
                - product_count
                - order_status
              example: 
                {
                  "user_id": 1,
                  "product_id": 2,
                  "product_count": 3,
                  "order_status": "confirmed"
                }
      responses:
        '200':
          description: new user creation
          content:
            object:
              example:
                {
                  "first_name": "newUser3",
                  "is_admin": false,
                  "last_name": "LMNO",
                  "phone_no": "1234567891",
                  "user_id": 6
                }
        '404':
          description: details not found
  /updateOrderStatus:
    put:
      tags:
        - update order status
      summary: Update status of an existing order
      requestBody:
        description: Update an existing order status
        content:
          application/json:
            schema:
              type: object
              required: 
                - order_id
                - order_status
              properties:
                order_id:
                  type: integer
                  example: 3
                order_status:
                  type: string
                  example: on hold
      responses:
        '200':
          description: order status successfully updated
          content:
            object:
              example:
                {
                  "order_id": 3,
                  "order_status": "on hold",
                  "product_count": 4,
                  "product_id": 2,
                  "user_id": 1
                }
        '404':
          description: order_id not found
          content:
            object:
              example:
                {
                  "msg": "order_id not found"
                }
  /    